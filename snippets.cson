'.source.js':
## ES6

  'Import':
    'prefix': 'RL: Import'
    'body': 'import ${1} from \'${2}/${1}\';'

  'Arrow Function':
    'prefix': 'RL: Arrow Function'
    'body': '(${1}) => {${2}}'

## ReactJS

  'Declarations':
    'prefix': 'RL: Declare'
    'body': '// Absolute Dependencies\n\n// Relative Dependencies\n\n// Variable Declarations'

  'Constructor w/ State':
    'prefix': 'RL: Constructor-State'
    'body': 'constructor(props) {\n  super(props);\n  this.state = {${1}};\n}'

  'React New Ref':
    'prefix': 'RL: New Ref'
    'body': 'ref={(${1}) => { this.${1} = ${1}; }}'

  'New React Component':
    'prefix': 'RL: New Component / Class / React'
    'body': '// Absolute Dependencies\n
            import React from \'react\';\n
            // Relative Dependencies\n\n
            // Variable Declarations\n\n
            class ${1} extends React.Component {\n
            \trender() {\n
            \t\treturn(${3});\n
            \t};\n
            }\n\n
            ${1}.propTypes = {\n\t${2}\n}\n\n
            ${1}.defaultProps = {\n\t${2}\n}\n\n
            export default ${1};'

## React PropTypes

  'PropShell':
    'prefix': 'RL: PropShell'
    'body': '${1}.propTypes = {${2}};'

  'React PropType String':
    'prefix': 'RL: PropType String'
    'body': 'React.PropTypes.string,'

  'React PropType String Required':
    'prefix': 'RL: PropType String Required'
    'body': 'React.PropTypes.string.isRequired,'

  'React PropType Function':
    'prefix': 'RL: PropType Function'
    'body': 'React.PropTypes.func,'

  'React PropType Boolean':
    'prefix': 'RL: PropType Boolean'
    'body': 'React.PropTypes.bool,'

  'React PropType Boolean Required':
    'prefix': 'RL: PropType Boolean Required'
    'body': 'React.PropTypes.bool.isRequired,'

  'React PropType Number':
    'prefix': 'RL: PropType Number'
    'body': 'React.PropTypes.number,'

  'React PropType Number Required':
    'prefix': 'RL: PropType Number Required'
    'body': 'React.PropTypes.number.isRequired,'

## Redux

  'Redux Empty Reducer':
    'prefix': 'RL: Redux Reducer'
    'body': '
      const initialState = {${2}};\n\n

      // eslint-disable-next-line\n
      export function ${1}(state = initialState, action) {\n\t
        if (action.type === "") {${3}}\n\t
        return state;\n
      }
    '

## ESLint Exceptions

  'ESLint ExceptMethods UseThis':
    'prefix': 'RL: ESLint | ExceptMethods UseThis'
    'body': '/* eslint class-methods-use-this: ["error", { "exceptMethods":\n["${1}"] }] */'

  'ESLint Disable Line':
    'prefix': 'RL: ESLint | Disable / Line'
    'body': '// eslint-disable-line'

  'ESLint Disable Next Line':
    'prefix': 'RL: ESLint | Disable / Next Line'
    'body': '// eslint-disable-next-line'

## ESLint Globals

  'ESLint Global: Materialize':
    'prefix': 'RL: ESLint | Global / Materialize'
    'body': '/* global Materialize */'
